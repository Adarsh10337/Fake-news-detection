# Import the required libraries
from flask import Flask, render_template, request
import pandas as pd
import numpy as np
import re
import string
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
from sklearn.metrics import classification_report

# Initialize the Flask application
app = Flask(__name__)

# Load and preprocess the dataset
df_fake = pd.read_csv("Fake (1).csv")
df_true = pd.read_csv("True (1).csv")
df_fake["class"] = 0
df_true["class"] = 1
df_fake_manual_testing = df_fake.tail(10)
df_true_manual_testing = df_true.tail(10)
df_manual_testing = pd.concat([df_fake_manual_testing, df_true_manual_testing], axis=0)
df_manual_testing.to_csv("manual_testing.csv")
df_merge = pd.concat([df_fake, df_true], axis=0)
df = df_merge.drop(["title", "subject", "date"], axis=1)
def wordopt(text):
    text = text.lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub("\\W", " ", text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)
    return text
df["text"] = df["text"].apply(wordopt)
x = df["text"]
y = df["class"]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)
vectorization = TfidfVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv_test = vectorization.transform(x_test)
LR = LogisticRegression()
LR.fit(xv_train, y_train)
DT = DecisionTreeClassifier()
DT.fit(xv_train, y_train)
GBC = GradientBoostingClassifier(random_state=0)
GBC.fit(xv_train, y_train)
RFC = RandomForestClassifier(random_state=0)
RFC.fit(xv_train, y_train)

# Define the home page route
@app.route('/')
def home():
    return render_template('/index.html')

# Define the classify route for form submission
@app.route('/classify', methods=['POST'])
def classify():
    news = request.form['news']
    result = manual_testing(news)
    return render_template('/result.html', result=result)

# Define the manual testing function
def manual_testing(news):
    testing_news = {"text": [news]}
    new_def_test = pd.DataFrame(testing_news)
    new_def_test["text"] = new_def_test["text"].apply(wordopt)
    new_x_test = new_def_test["text"]
    new_xv_test = vectorization.transform(new_x_test)
    pred_LR = LR.predict(new_xv_test)
    pred_DT = DT.predict(new_xv_test)
    pred_GBC = GBC.predict(new_xv_test)
    pred_RFC = RFC.predict(new_xv_test)
    return {
        "LR": output_lable(pred_LR[0]),
        "DT": output_lable(pred_DT[0]),
        "GBC": output_lable(pred_GBC[0]),
        "RFC": output_lable(pred_RFC[0])
    }

# Define the output label function
def output_lable(n):
    if n == 0:
        return "Fake News"
    elif n == 1:
        return "Not A Fake News"

# Run the Flask application
if __name__ == '__main__':
    app.run()
